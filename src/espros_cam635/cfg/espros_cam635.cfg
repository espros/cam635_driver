#!/usr/bin/env python

PACKAGE = "espros_cam635"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

image_type_enum = gen.enum([ gen.const("Grayscale", int_t, 0, "Grayscale"),
                             gen.const("Distance",  int_t, 1, "Distance"),
                             gen.const("Distance_and_Amplitude", int_t, 2, "Distance and Amplitude"),
                             gen.const("Distance_and_Grayscale", int_t, 3, "Distance and Grayscale")
                             ], "An enum to set image type")


op_mod_enum     = gen.enum([ gen.const("Wide_Field_image", int_t, 0, "Wide Field image"),
                             gen.const("Narrow_Field_manual", int_t, 1, "Narrow Field manual"),                             
                             gen.const("Narrow_Field_result", int_t, 2, "Narrow Field result"),
                             gen.const("Narrow_Field_result_and_image", int_t, 3, "Narrow Field result and image"),
                             gen.const("Wide_Field_and_Narrow_Field_result", int_t, 4, "Wide Field and Narrow Field result"),
                             gen.const("Wide_Field_and_Narrow_Field_auto", int_t, 5, "Wide_Field and Narrow Field auto"),
                             gen.const("Wide_Field_and_Narrow_Field_image", int_t, 6, "Wide Field and Narrow Field image")
                             ], "An enum to set operating mode")

hdr_enum        = gen.enum([ gen.const("HDR_off", int_t, 0, "HDR off"),
                             gen.const("HDR_spatial", int_t, 1, "HDR spatial"),
                             gen.const("HDR_temporal", int_t, 2, "HDR temporal")
                           ], "An enum to set HDR modes")


######  Name                      Type   Reconfiguration level  Description     Default Min  Max
### Acquisition Control
gen.add("image_type",            int_t,     0,  "Image type",  1, 0, 3, edit_method = image_type_enum)
gen.add("mode",                  int_t,     0,  "Operating mode", 0, 0, 3, edit_method = op_mod_enum)
gen.add("channel",               int_t,     0,  "Frequency modulation channel",  0, 0, 15)
gen.add("frame_rate",            double_t,  0,  "Frame rate [Hz]",  30.0, 0, 50.0)
gen.add("start_stream",          bool_t,    0,  "Start / Stop image acquisition streaming", True)
gen.add("trigger_single_shot",   bool_t,    0,  "Single image acquisition",  False)
gen.add("hdr",                   int_t,     0,  "HDR mode", 0, 0, 2, edit_method = hdr_enum)
gen.add("automatic_integration_time", bool_t, 0,  "Automatic integration time",  True)
gen.add("integration_time_0",     int_t,    0,  "Integration time TOF for beam A [uS]",  200, 0, 1000)
gen.add("integration_time_1",     int_t,    0,  "Integration time TOF for beam A [uS]",    0, 0, 1000)
gen.add("integration_time_2",     int_t,    0,  "Integration time TOF for beam A [uS]",    0, 0, 1000)
gen.add("integration_time_3",     int_t,    0,  "Integration time TOF for beam A [uS]",    0, 0, 1000)
gen.add("integration_time_4",     int_t,    0,  "Integration time TOF for beam B [uS]",  200, 0, 1000)
gen.add("integration_time_5",     int_t,    0,  "Integration time TOF for beam B [uS]",    0, 0, 1000)
gen.add("integration_time_gray",  int_t,    0,  "Integration time Grayscale [uS]",         0, 0, 50000)
gen.add("low_power_illumination", bool_t,   0,  "Low power illumination",  False);

gen.add("temporal_filter_factor_wfov", double_t, 0,  "Kalman all filter gain coefficient", 0.1, 0.0, 1.0)
gen.add("temporal_filter_threshold_wfov", int_t, 0,  "Kalman all filter threshold [mm]",    300, 0, 10000)
gen.add("temporal_filter_factor_nfov", double_t, 0,  "Kalman spot filter gain coefficient", 0.1, 0.0, 1.0)
gen.add("temporal_filter_threshold_nfov", int_t, 0,  "Kalman spot filter threshold [mm]",    300, 0, 10000)

gen.add("spatial_average_filter", bool_t,   0,  "Spatial average filter",  False)
gen.add("spatial_median_filter",  bool_t,   0,  "Median filter",           False)

gen.add("min_amplitude_0",        int_t,    0,  "threshold minAmplitude 0 beam A LSB",       50, 0, 2047)
gen.add("min_amplitude_1",        int_t,    0,  "threshold minAmplitude 1 beam A LSB",      100, 0, 2047)
gen.add("min_amplitude_2",        int_t,    0,  "threshold minAmplitude 2 beam A LSB",      200, 0, 2047)
gen.add("min_amplitude_3",        int_t,    0,  "threshold minAmplitude 3 beam A LSB",      500, 0, 2047)
gen.add("min_amplitude_4",        int_t,    0,  "threshold minAmplitude 4 beam B LSB",      200, 0, 2047)

gen.add("offset_distance",        int_t,    0,  "distance offset mm",     0, -15000, 15000)

gen.add("interference_detection", bool_t, 0,  "Use interference detection",  False);
gen.add("interference_detection_threshold",  int_t,  0,  "Interference detection limit LSB", 0, 0, 2000)
gen.add("interference_detection_last_value", bool_t, 0,  "Use interference detection last value",  False);

gen.add("roi_left_x",             int_t,    0,  "ROI left X",     0, 0,  153)
gen.add("roi_top_y",              int_t,    0,  "ROI top Y",      0, 0,   57)
gen.add("roi_right_x",            int_t,    0,  "ROI right X",  159, 5,  159)
gen.add("roi_bottom_y",           int_t,    0,  "ROI bottom Y",  59, 1,   59)

gen.add("lens_center_offset_x",      int_t,    0,  "Lens Optical axis offset releative sensor center X direction [pix]", 0, -100, 100)
gen.add("lens_center_offset_y",      int_t,    0,  "Lens Optical axis offset releative sensor center Y direction [pix]", 0, -100, 100)

gen.add("enable_cartesian",      bool_t,    0,  "Cartesian transformation",  True)
gen.add("enable_images",         bool_t,    0,  "Enable Images",  True)
gen.add("enable_point_cloud",    bool_t,    0,  "Enable point cloud",  True)
gen.add("enable_image_header",   bool_t,    0,  "Enable image header",  True)

exit(gen.generate(PACKAGE, "cam635_node", "espros_cam635"))
